sources源代码


*******************************************************************
****************** js  书写方式 **********************************

1.行内样式 不易于维护

onclic点击事件   alert内容
onclick="alert（‘hello js’）"	


2.内部js

script标签（相当于css样式里的style标签）  type标签属性

<script type="text/javascript">99 该属性告诉浏览器，要用js去
执行script内的js样式
注意：该属性在h5标准文档模式下，type是可以省略的



3.外链

通过script标签引入  标签属性 src 引入js文件路径

<script src="base.js">


*****************************************************************
****************************************************************
*****输出方式

1.alert(‘内容’)  警告框
alert(‘hello’);




2.console.log(‘内容’)  控制台
console.log(‘js’);



3.document.write(‘内容或标签内容’)   网页中
若输出标签内容是，标签会被渲染
document.write(‘<h1>hello js</h1>’);





4.prompt(‘提示信息’) 未来可以用变量来接收用户输入内容

prompt(‘请输入你的银行卡密码’);





js代码默认执行顺序 

默认执行顺序，从左向右，自上而下






*******************************************************************
/*/*/*/*/*/*/*/*/*/*/*/*/*数据/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*




		能够被输出的内容就是数据
		    数据是有类型的


检测数据类型 typeof（数据）
console.log（typeof 1）;  /*/*检测出了1的数据类型/*/*





1.Number  数字类型：就是直接的阿拉伯数字

2.String 字符串类型：用单引号或双引号包裹的内容就是字符串

3.Boolean     布尔

4.Undefined   未定义

5.Null	空










***************为什么学习变量**********************

变量就是向内存申请一块空间，并且该空间在内存中有地址的。

基本语法：var 变量名 = 数据; 把数据存放内存空间中
等于号（赋予值）

 
通过变量名可以操作空间中的数据
var num = 1;
console.log（num + num）




*******************************************************************
*********************变量的定义和使用******************************




*-*-*-*-*-*-*-*-*-*变量名区分大小写*-*-*-*-*-*-*-*-*-*-*




1.变量可以先声明，再赋值  var 变量名;变量名 = 数据;
var age;
age = 1;




2.变量批量声明赋值  var 变量名 = 数据，变量名 = 数据，变量名 = 数据;
var a = 1，b = 2，c = 3;




3.先批量声明 再批量赋值
var a，b，c;
a = 1，b = 2，c = 3;




4.变量可以重复赋值  出来两组值 一组123  一组456
因为从上至下解析代码
变量最终的结果是最后一次的赋值。

var a = 123;
console.log(a);
a = 456;
console.log(a);




5.一个变量可以赋值给另一个变量   值为10
var a = 10;
var b = a;
console.log(b);

一个变量a赋值给另一个变量b时，此时，再内存中会克隆一份新的变量a所代表
的数据，存放在b的空间中。若再次改变b时，a不会受到影响。


*********************************************************************
*********************************************************************

实现两个变量的交换   num1,num2值实现交换。

var num1 = 10;

var num2 = 20;

var temp = num1;	声明第三个变量 temp 存放了一个10 temp = 10;

var num1 = num2;	把num2中的20克隆一份给num1   num1 = 20;

var num2 = temp;

console.log（num1，num2）;




****************************************************************
****************************************************************

小数在做计算时，会丢失精度

console.log（0.3-0.2）    得出的值无限接近0.1 不是0.1

解决办法  把小数转换成整数/*/*/*/*/*

var r =(0.3*100) - (0.2*100);
console.log(r/100);

****************************************************************
**************************************************************** 





NaN, Not a Number   不是一个正常的数字

console.log(NaN);

console.log(typeof NaN);  数据监测是一个数字




***************************************************************
******************字符串的单双引号嵌套*************************



程序"猿"
程序‘媛’
 
console.log(‘  程序"猿"  ’);被单引号嵌套的双引号会被当做普通字符

console.log("  程序'媛' ");被双引号嵌套的单引号会被当做普通字符





****************************************************************
**************************字符串拼接****************************

任何数据和字符串相加，此时+表示拼接意义

var str1 =‘1314’;

var str2 =‘520’;

console.log(str1 + str2);




******************************************************************
**************** Boolean  布尔类型 *******************************

布尔值输出值只有连个  为：是（true）不是（false）

var isOk = true;	为isOk输出为是的指令
console.log(isOk);


var isOk = false;	为isOk输出为不是的指令
console.log(isOk);



语法：isNaN（数据）   监测这个数据是不是NaN
是（true）不是（false）


例：
var r = isNaN（1）;
console.log(r);


var r = isNaN（NaN）;
console.log(r);






************************* undefined ***************************


var a;
console.log(a);  未赋值  输出值为undefined（默认值）




类型：undefined   未定义
特点：undefined 只有一个值 就是本身undefined
意义：若一个变量没有赋值是，默认值是undefined



*************************** NULL类型 **************************


console.log(typeof null);

类型：称呼为null类型
仅有一个值：null
表示空，空对象
监测结果：blject


***************************************************************


///////////////1.算术运算符//////////////

+（加）-（减）*（乘）/（除）%（求余数）





//////////////2.复合赋值运算符：赋值和算术的结合  /////////////

+=   -=   *=  /=   %=
针对的是变量  必须要有变量名+值操作

var a = 1;
a+=100;		// a = a + 100; //




/////////////////////////3.比较运算符  ///////////////////////

任何数据只要运算，必然会产生结果
运算的结果始终是布尔值   是（true）不是（false）

1.比较大小时，一般是比较数字
2.比较相等时，一般是比较数字，字符串

var r = 1 > 2;
console.log（r）;

输出结果false



var r = 1 ≤ 2;
console.log（r）;

输出结果true（因为输出结果小于或等于满足了其中一个条件）


console.log（100==100）;    输出结果true

console.log（‘123456’==‘abcdefg’）;  输出结果false

console.log（‘123456’==‘12345’）; 	输出结果false

console.log（‘123456’!=‘12345’）; 	输出结果true


>
<
>=	大于等于
<=	小于等于
!=	不等于
==	等于		仅仅比较值
===	全等		比较值也比较类型
!==	非全等于






































































































