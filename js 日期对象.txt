
***************************日期对象******************************
Date是内置对象

Date  是构造函数  对象自己创建

语法:

方式1

var date = new Date（）;		当前时间




方式2   

两种写法‘2029-10-10 12:12:12’或‘2029/10/10 12:12:12’

var date = new Date（2029-10-10 12:12:12）;  自己定义时间




方式3    默认1970年1月1日

var date = new Date（毫秒）;

var date = new Date（99999999999）;

1s = 1000ms



方式4

var date = new Date（年,月,日,时,分,秒,毫秒）;

var date = new Date（2019,3,4,12,12,12,500）;




**************************操作日期对象**************************

因为系统里只有11个月 默认少一个月 所有月份要+1

get  获取

set  设置


创建一个日期对象
var date = new Date（）;


获取：  	*****日期格式化*****

var year = date.getFullYear(); 		年

var month = date.getMonth()+1; 		月

var day = date.getDate();		日

var hours = date.getHours();  		时

var minutes = date.getMinutes();	分钟

var seconds = date.getSeconds();	获取秒

var week = date.getDay(); 		星期数  0-6  0表示周日

拼接一种格式
var str = year + '年' + month + '月' + day + '日 ' + hours + '点' + minutes + '分' + seconds + '秒';
console.log(str);


***************************日期格式化封装************************

    function timeFormat(date) {
      // 获取
      var year = date.getFullYear();  // 获取年份
      var month = date.getMonth() + 1;  // 获取月份  
      month = month<10?'0'+month:month;

      var day = date.getDate();  // 获取日期
      day = day<10?'0'+day:day;

      var hours = date.getHours();  // 获取小时
      hours = hours<10?'0'+hours:hours;

      var minutes = date.getMinutes();  // 获取分钟
      minutes = minutes<10?'0'+minutes:minutes;

      var seconds = date.getSeconds();  // 获取秒
      seconds = seconds<10?'0'+seconds:seconds;

      var str = year + '年' + month + '月' + day + '日 ' + hours + '点' + minutes + '分' + seconds + '秒';

      // 返回值
      return str;
    }



**************************计算日期差****************************

计算时间差：

var temp = end.getTime() - start.getTime(); 

var temp = end - start;    简写


换算

var hours = parseInt(temp / 1000 / 60 /60);  //小时

var hours = parseInt(temp / 1000 /60%60);   //分钟

var hours = parseInt(temp / 1000%60);   //秒




************* 内置对象-数组（Array是一个特殊对象）**************

Array








*************************数组反转***********************

arr.reverse  数组中的数字反转



排序

arr.sort(functinon(a,b)) {
		console.log(b-a);       // a-b
		return b-a;		// a-b
	}




*************************截取数组*******************************

截取后，不会改变原数组，而是返回新的数组

数组名.slice(start,end);


传两个值  从1-8


不写值 截取所有


写一个值，截取后面所有




*****************************数组拼接***************************

数组中的数据拼接：

arr.join(‘-’)  



































