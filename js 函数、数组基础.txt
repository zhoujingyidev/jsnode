 *************************** 函数 ******************************

fonction函数名（）{
	//函数名和变量名的命名规范一样
	//函数体
}


创建函数：
function xiyifu(){
	console.log('准备好洗裤子');
	console.log('准备好洗衣液');
	console.log('疯狂的搅拌');
	console.log('裤子洗好了');
}


调用：
xiyifu()；




****************************匿名函数*****************************

匿名函数和运算符配合使用，目的是为了语法不报错

（function（）{}）

调用：函数后面加（）自调用  马上执行


 
（function（）{
	console.log('1');
	console.log('2');
	console.log('3');
	console.log('4');
}）（）;





a和b是形参

（function（a，b）{
	console.log('a + b');
}）（100,200）;




/*/*/*/*/*/*/*/*/*/*/*/ 函数的参数 /*/*/*/*/*/*/*/*/*/*/*/

参数有两种

1.形参：在创建函数时，小括号中定义的标识符
2.实参：在调用函数时，小括号中传入的实际的数据
3.关系：实参会传入给形参，关系是一一对应的
4.若形参没有接收到实参，默认值是undefined，不会报错


function xiyifu(yifu1，yifu2){
	console.log('准备好洗' + yifu1 + yifu2 +  '...');
	console.log('准备好洗衣液...');
	console.log('疯狂的搅拌...');
	console.log(yifu2 + yifu1 + '洗好了...');
}

xiyifu('袜子'，帽子)；
xiyifu('大裤衩'，帽子)；




************************ return 返回 *****************************

*/*/*/*/*/*/*/*/*返回数据 并终止函数*/*/*/*/*/*/*/*/* 

*/*/*/*/*/*/*/*/*返回就是把函数里的公式 返回给 调用*/*/*/*/*/*/*/

*/*/*/*/*/*/*/*/*/*/*/终止函数执行*/*/*/*/*/*/*/*/*/*/*/*/

检查一个数组是否是偶数
返回：true或false


function iseven(num){
	若没有设置返回 函数默认返回undefined
      if(num%2==0){
	   return true;
	}else{
	   return false;
		}
}

var r = iseven(10);



***********************（冒泡排序自动版）*************************

// 需求：对一个数字数组，实现从小到大排列   （冒泡排序自动版）

        var nums = [3, 2, 1];
        // 比较的趟数：数组.length-1
        // 每趟比较的次数：数组.length-当前回合（比较的趟数）
        // 相邻的两个比较

        //外层循环-实现比较回合（趟数）
        for (var tang = 1; tang <= nums.length; tang++) {
            console.log('第' + tang + '趟');
            //内层循环-实现比较次数
            for (var count = 1; count <= nums.length - tang; count++) {
                console.log('第' + count + '次比较');
                // 相邻比较就是前和后比较
                // 前：count-1
                // 后：count
                // console.log(count-1 + '----' + count);
                if (nums[count-1] > nums[count]) {
                    var temp = nums[count-1];
                    nums[count-1] = nums[count];
                    nums[count] = temp;
                }
            }
        }
        console.log(nums);

















































































































































































